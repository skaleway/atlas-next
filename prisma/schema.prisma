generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  STUDENT
  TEACHER
}

enum RoomRole {
  GUEST
  ADMIN
  MODERATORS
}

enum Grade {
  A
  B
  C
  D
  E
  F
  U
}

enum TopicContentType {
  PDF
  VIDEO
}

// Student and Admin model
// a student can be in many classrooms
model User {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  username       String       @unique
  firstname      String?
  secondname     String?
  age            Int?
  email          String       @unique
  usertype       UserType     @default(STUDENT)
  selected       Boolean      @default(false)
  profilePicture String?
  clerkId        String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  roomMember     RoomMember[]
  Attempt        Attempt[]
}

model TopicContent {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  topicId     String           @db.ObjectId
  contenttpye TopicContentType @default(PDF)
  content     String
  topic       Topic            @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

// // Topic model
// // This model refers to the subject of a class
model Topic {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String         @unique
  roomId       String         @db.ObjectId
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  TopicContent TopicContent[]
  Quiz         Quiz[]
  Room         Room           @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

// // Quiz model
// // This model refers to the quiz of a topic
model Quiz {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String     @unique
  description String?
  createdBy   String     @db.ObjectId
  topicId     String?    @db.ObjectId // modified to optional to test the route
  topic       Topic?     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    Attempt[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Room        Room?      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId      String?    @db.ObjectId
}

// // Question model
// // This model refers to the question of a quiz
model Question {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  question        String
  options         String[]
  answer          String
  ansDesc         String?
  quizId          String            @db.ObjectId
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  quiz            Quiz              @relation(fields: [quizId], references: [id], onDelete: Cascade)
  AttemptQuestion AttemptQuestion[]
}

// // Attempt model
// This model refers to the attempt of a student on a quiz
model Attempt {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  score           Int
  grade           Grade             @default(U)
  quizId          String            @db.ObjectId
  studentId       String            @db.ObjectId
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  quiz            Quiz              @relation(fields: [quizId], references: [id], onDelete: Cascade)
  student         User              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  AttemptQuestion AttemptQuestion[]
}

model AttemptQuestion {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  attemptId  String   @db.ObjectId
  questionId String   @db.ObjectId
  answer     String
  attempt    Attempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// class room model
model Room {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  description String?
  creatorId   String       @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     RoomMember[]
  topics      Topic[]
  quizzes     Quiz[]
}

// Members of a classroom (subject)
model RoomMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  roomId    String   @db.ObjectId
  userId    String   @db.ObjectId
  role      RoomRole @default(GUEST)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id])
}
