generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  STUDENT
  TEACHER
}

enum RoomRole {
  GUEST
  ADMIN
  MODERATORS
}

enum TopicContentType {
  PDF
  VIDEO
}

// Student and Admin model
// a student can be in many classrooms
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  username       String    @unique
  firstname      String?
  secondname     String?
  age            Int?
  email          String    @unique
  classroomId    String[]  @db.ObjectId // will be empty for admin
  usertype       UserType  @default(STUDENT)
  profilePicture String?
  clerkId        String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Attempt        Attempt[]
}

model TopicContent {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  topicId     String           @db.ObjectId
  contenttpye TopicContentType @default(PDF)
  content     String
  topic       Topic            @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

// // Topic model
// // This model refers to the subject of a class
model Topic {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String         @unique
  classRoomId  String         @db.ObjectId
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  TopicContent TopicContent[]
  Room         Room?          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId       String?        @db.ObjectId
  Quiz         Quiz[]
}

// // Quiz model
// // This model refers to the quiz of a topic
model Quiz {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String     @unique
  topicId   String?    @db.ObjectId // modified to optional to test the route
  topic     Topic?     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  questions Question[]
  attempts  Attempt[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// // Question model
// // This model refers to the question of a quiz
model Question {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  question    String
  options     String[]
  answer      String
  description String
  quizId      String   @db.ObjectId
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  attemptId   String?  @db.ObjectId
}

// // Attempt model
// This model refers to the attempt of a student on a quiz
model Attempt {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  score     Int
  quizId    String   @db.ObjectId
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   String[]
  studentId String   @db.ObjectId
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// class room model
model Room {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  name      String       @unique
  creatorId String       @db.ObjectId
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  members   RoomMember[]
  topics    Topic[]
}

// Members of a classroom (subject)
model RoomMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  roomId    String   @db.ObjectId
  userId    String   @db.ObjectId
  role      RoomRole @default(GUEST)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}
